[pytest]
# 設定 pytest 自動尋找測試文件的目錄
# `.` 代表當前目錄，pytest 會在這個目錄下尋找 `test_*.py` 或 `*_test.py` 格式的測試文件
# 若測試檔案放在其他資料夾，可修改這個設定
testpaths = .

# 設定 Python 模組的搜尋路徑，確保 pytest 能找到應用程式的程式碼
# 這樣測試時可以直接 import `app` 和 `scripts` 內的模組，而不需要額外設定 sys.path
pythonpath = 
    app
    scripts

# 定義 pytest 可用的標記 (markers)
# 這些標記可以用來分類測試，讓 pytest 在執行時可以選擇特定類型的測試
markers =
    asyncio  # 用於標記 asyncio 測試，讓 pytest 以適當的方式處理異步測試
    order    # 用於標記執行順序有要求的測試，通常與 pytest-order 搭配使用

# 設定 asyncio 測試模式為 `auto`
# 這樣 pytest 會自動偵測並處理異步函式 (async def) 測試，無需額外指定 event loop
asyncio_mode = auto

# 設定 asyncio 測試的預設作用域 (scope)
# `function` 表示 event loop 會在每個測試函式內部建立並關閉，避免測試之間相互影響
asyncio_default_fixture_loop_scope = function

# 設定 pytest 測試的執行時間上限 (timeout)
# 若某個測試超過 30 秒仍未完成，pytest 會終止該測試並回報錯誤，避免測試掛起
# 如果測試需要更長時間，可適當增加這個值
timeout = 30
